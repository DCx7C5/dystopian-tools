#!/bin/sh
# shellcheck shell=sh
# shellcheck disable=SC2001
# shellcheck disable=SC2034


if [ "$(id -u)" -ne 0 ]; then
    echo "User must be root"
    exit 1
fi

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
VAR_LIB_FILE="/usr/lib/dystopian-libs/libtools-variables.sh"
HELPER_LIB_FILE="/usr/lib/dystopian-libs/libhelper.sh"
SSL_LIB_FILE="/usr/lib/dystopian-libs/libssl.sh"
GPG_LIB_FILE="/usr/lib/dystopian-libs/libgpg.sh"
DC_DB_LIB_FILE="/usr/lib/dystopian-libs/libcrypto-db.sh"


[ -f "$VAR_LIB_FILE" ] || VAR_LIB_FILE="$SCRIPT_DIR/../../dystopian-libs/lib/libtools-variables.sh"
[ -f "$HELPER_LIB_FILE" ] || HELPER_LIB_FILE="$SCRIPT_DIR/../../dystopian-libs/lib/libhelper.sh"
[ -f "$SSL_LIB_FILE" ] || SSL_LIB_FILE="$SCRIPT_DIR/../../dystopian-libs/lib/libssl.sh"
[ -f "$GPG_LIB_FILE" ] || GPG_LIB_FILE="$SCRIPT_DIR/../../dystopian-libs/lib/libgpg.sh"
[ -f "$DB_LIB_FILE" ] || DB_LIB_FILE="$SCRIPT_DIR/../../dystopian-libs/lib/libcrypto-db.sh"


# Source library files
# shellcheck source=../../dystopian-libs/lib/libtools-variables.sh
[ -f "$VAR_LIB_FILE" ] && . "$VAR_LIB_FILE"
# shellcheck source=../../dystopian-libs/lib/libhelper.sh
[ -f "$HELPER_LIB_FILE" ] && . "$HELPER_LIB_FILE"
# shellcheck source=../../dystopian-libs/lib/libssl.sh
[ -f "$SSL_LIB_FILE" ] && . "$SSL_LIB_FILE"
# shellcheck source=../../dystopian-libs/lib/libgpg.sh
[ -f "$GPG_LIB_FILE" ] && . "$GPG_LIB_FILE"
# shellcheck source=../../dystopian-libs/lib/libcrypto-db.sh
[ -f "$DB_LIB_FILE" ] && . "$DB_LIB_FILE"
trap on_exit EXIT

VERBOSE=0
DEBUG=0
QUIET=0
RAND="$(od -An -N2 -i /dev/urandom | tr -d ' ' | head -c 4)"


help() {
    cat <<EOF
Usage: $0 <command> [subcommand] [options]

Description:
  A POSIX shell script to manage SSL certificates and GPG keys with strong encryption
  and Argon2id key derivation for people who always forget OpenSSL syntax.


SSL Commands:

  ssl create-ca                       Create a Root or Intermediate Certificate Authority
    --name <string>:                    (Required) Common Name (CN) for the CA
    --cert <file>:                      (Optional) Output certificate file (default: ca.pem or intermediate-ca.pem)
    --key <file>:                       (Optional) Output private key file (default: ca-key.pem or intermediate-ca-key.pem)
    --password <file|string>:           (Optional) Password for private key encryption (default: Argon2id)
    --salt <file>:                      (Optional) Output file for salt
    --no-argon:                         (Optional) Use PBKDF2 instead of Argon2id for key derivation
    --config <file>:                    (Optional) Output configuration file
    --csr <file>:                       (Optional) Output CSR file
    --keep-csr:                         (Optional) Retain CSR after certificate creation
    --email <string>:                   (Optional) Email address for certificate
    --country <string>:                 (Optional) Country code (e.g., US, DE)
    --state <string>:                   (Optional) State or province
    --locality <string>:                (Optional) City or locality
    --org <string>:                     (Optional) Organization name
    --orgunit <string>:                 (Optional) Organizational unit
    --days <number>:                    (Optional) Certificate validity in days (default: 3650)
    --intermediate:                     (Optional) Create intermediate CA instead of root CA
    --root-ca <string>:                 (Optional) Root CA Common Name (for intermediate CA)
    --root-ca-key <file>:               (Optional) Root CA private key file
    --root-ca-cert <file>:              (Optional) Root CA certificate file
    --root-ca-pass <file|string>:       (Optional) Root CA private key password
    --root-ca-salt <file>:              (Optional) Root CA salt file
    --set-as-default:                   (Optional) Set as default CA
    --set-as-defaultRoot:               (Optional) Set as default root CA

  ssl create-key                      Create a private key
    --name <string>:                    (Optional) Name for the key
    --key <file>:                       (Optional) Output private key file
    --password <file|string>:           (Optional) Password for private key encryption (default: Argon2id)
    --salt <file>:                      (Optional) Output file for salt
    --no-argon:                         (Optional) Use PBKDF2 instead of Argon2id for key derivation

  ssl create-csr                      Create a Certificate Signing Request (CSR)
    --name <string>:                    (Optional) Name for the key
    --key <file>:                       (Optional) Private key file
    --csr <file>:                       (Optional) Output CSR file
    --config <file>:                    (Optional) Output configuration file
    --domains <string>:                 (Optional) Comma-separated list of domains
    --ips <string>:                     (Optional) Comma-separated list of IP addresses
    --cn <string>:                      (Optional) Common Name (CN) for the CSR
    --client:                           (Optional) Create CSR for client certificate (default: true)
    --server:                           (Optional) Create CSR for server certificate
    --pass <file|string>:               (Optional) Password for private key
    --salt <file>:                      (Optional) Output file for salt
    --mail <string>:                    (Optional) Email address for certificate
    --crldist <string>:                 (Optional) CRL distribution point
    --country <string>:                 (Optional) Country code (e.g., US, DE)
    --state <string>:                   (Optional) State or province
    --locality <string>:                (Optional) City or locality
    --org <string>:                     (Optional) Organization name
    --orgunit <string>:                 (Optional) Organizational unit

  ssl sign-csr                        Sign a Certificate Signing Request (CSR) to create a certificate
    --name <string>:                    (Optional) Name for the CSR
    --csr <file>:                       (Optional) Input CSR file
    --caname <string>:                  (Optional) CA Common Name or index
    --cacert <file>:                    (Optional) CA certificate file
    --cakey <file>:                     (Optional) CA private key file
    --cert <file>:                      (Optional) Output certificate file
    --capass <file|string>:             (Optional) CA private key password
    --casalt <file>:                    (Optional) CA salt file
    --days <number>:                    (Optional) Certificate validity in days
    --keep:                             (Optional) Retain both CSR and config files
    --keepcsr:                          (Optional) Retain CSR file
    --keepcfg:                          (Optional) Retain config file
    --config <file>:                    (Optional) Configuration file

  ssl list-ca                         List Certificate Authorities
    --type <all|root|intermediate>      (Optional) CA type to list (default: all)
    --verbose                           (Optional) Show detailed information

  ssl show-ca                         Show detailed CA information
    --index <index>                     (Required) CA index to show
    --type <root|intermediate>          (Optional) CA type (default: root)
    --cert                              (Optional) Show certificate details

  ssl create-config                   Create SSL configuration file for OpenSSL operations
    --type <rootca|intca|client|server> (Required) Certificate type to generate config for
    --domains-ips <string>              (Optional) Comma-separated domains/IPs (for server certs)
    --email <string>                    (Optional) Email address for certificate
    --country <string>                  (Optional) Country code (e.g., US, DE)
    --state <string>                    (Optional) State or province
    --locality <string>                 (Optional) City or locality
    --organization <string>             (Optional) Organization name
    --orgunit <string>                  (Optional) Organizational unit
    --common-name <string>              (Optional) Common Name (CN) for the certificate
    --crldistributionpoint <string>     (Optional) CRL distribution point URL

  ssl genpair
    --server                            (Required) Creates CSR for a server certificate.
    --client                            (Required) Creates CSR for a client certificate.
    --domains|--cn <string>             (Required) Comma-separated domains/IPs
    --outdir <directory>                (Optional) Output CSR file. Default: /etc/dystopian-crypto/{cert,cert/keys}
    --pass <file|string>                (Optional) Private key password
    --email <string>                    (Optional) Email address
    --country <string>                  (Optional) Country code
    --state <string>                    (Optional) State or province
    --locality <string>                 (Optional) City or locality
    --org <string>                      (Optional) Organization name
    --orgunit <string>                  (Optional) Organizational unit
    --crldist <url>                     (Optional) CRL distribution point URL

GPG Commands:

  gpg import                          Import GPG keys
    --file <file|dir>:                  (Optional) Path to file or directory containing keys
    --index <string>:                   (Optional) Index for key import
    --pass <file|string>:               (Optional) Passphrase for encrypted keys
    --scan-depth <number>:              (Optional) Directory scan depth for key import
    --homedir <dir>:                    (Optional) GPG home directory
    --delete:                           (Optional) Delete keys after import

  gpg export                          Export GPG keypair
    --fingerprint <string>:             (Optional) Fingerprint of the key to export
    --name <string>:                    (Optional) Real name associated with the key
    --key-id <string>:                  (Optional) Key ID to export
    --index <string>:                   (Optional) Index for key export
    --public <file>:                    (Optional) Output file for public key
    --private <file>:                   (Optional) Output file for private key
    --out <dir>:                        (Optional) Output directory for exported keys
    --homedir <dir>:                    (Optional) GPG home directory
    --passphrase <file|string>:         (Optional) Passphrase for private key
    --no-armor:                         (Optional) Export keys in binary format
    --no-openssl-encrypt:               (Optional) Disable OpenSSL encryption for private key
    --with-subkeys:                     (Optional) Include subkeys in export

  gpg genpair                         Generate a GPG keypair
    --name <string>:                    (Optional) Real name for primary key
    --email <string>:                   (Optional) Email for primary key
    --comment <string>:                 (Optional) Comment for primary key
    --sname <string>:                   (Optional) Real name for signing subkey
    --semail <string>:                  (Optional) Email for signing subkey
    --scomment <string>:                (Optional) Comment for signing subkey
    --ename <string>:                   (Optional) Real name for encryption subkey
    --eemail <string>:                  (Optional) Email for encryption subkey
    --ecomment <string>:                (Optional) Comment for encryption subkey
    --aname <string>:                   (Optional) Real name for authentication subkey
    --aemail <string>:                  (Optional) Email for authentication subkey
    --acomment <string>:                (Optional) Comment for authentication subkey
    --passphrase <file|string>:         (Optional) Passphrase for primary key
    --spassphrase <file|string>:        (Optional) Passphrase for signing subkey
    --epassphrase <file|string>:        (Optional) Passphrase for encryption subkey
    --apassphrase <file|string>:        (Optional) Passphrase for authentication subkey
    --expire <string>:                  (Optional) Expiry date for primary key
    --sexpire <string>:                 (Optional) Expiry date for signing subkey
    --eexpire <string>:                 (Optional) Expiry date for encryption subkey
    --aexpire <string>:                 (Optional) Expiry date for authentication subkey
    --homedir <dir>:                    (Optional) GPG home directory
    --sign:                             (Optional) Enable signing capability
    --encrypt:                          (Optional) Enable encryption capability
    --auth:                             (Optional) Enable authentication capability
    --no-subs:                          (Optional) Do not generate subkeys
    --index <string>:                   (Optional) Index for keypair

  gpg add-key                         Add a subkey to an existing GPG key
    --index <string>:                   (Optional) Index for key
    --homedir <dir>:                    (Optional) GPG home directory
    --name <string>:                    (Optional) Real name for subkey
    --email <string>:                   (Optional) Email for subkey
    --comment <string>:                 (Optional) Comment for subkey
    --uid <string>:                     (Optional) User ID for subkey
    --fingerprint <string>:             (Optional) Fingerprint of parent key
    --key-id <string>:                  (Optional) Key ID of parent key
    --passphrase <file|string>:         (Optional) Passphrase for parent key
    --subpassphrase <file|string>:      (Optional) Passphrase for subkey
    --encrypt:                          (Optional) Enable encryption capability for subkey
    --sign:                             (Optional) Enable signing capability for subkey
    --auth:                             (Optional) Enable authentication capability for subkey
    --expires <string>:                 (Optional) Expiry date for subkey

Maintenance Commands:
  show-index                          Show SSL index information
    --keys                              (Optional) Show key entries
    --ca                                (Optional) Show CA entries
    --verbose                           (Optional) Show detailed information
    --json                              (Optional) Output raw JSON index

  cleanup                             Clean up dystopian-crypto files and index
    --index <index>                     (Optional) Clean up specific index entry
    --orphaned                          (Optional) Remove orphaned files not in index
    --backups                           (Optional) Remove backup files
    --dry-run                           (Optional) Show what would be cleaned without doing it

  backup                              Create backup of dystopian-crypto directory
    --out <file>                        (Optional) Backup output file (default: /tmp/dystopian-crypto-backup-YYYYMMDD_HHMMSS.tar)
    --compress                          (Optional) Compress backup with gzip
    --exclude-keys                      (Optional) Exclude private keys from backup

  restore                             Restore dystopian-crypto directory from backup
    --from <file>                       (Required) Backup file to restore from
    --force                             (Optional) Force restore without confirmation

  set-default-ca                      Set default Certificate Authority
    --index <index>                     (Required) CA index to set as default
    --type <root|intermediate>          (Optional) CA type (default: root)

  install                             Creates keys and certs and Integrates them in corresponding environment
    --docker-client-cert
    --docker-server-cert


Other Commands:
  -v | --verbose                      Show verbose status informations
  -q | --quiet                        No output informations
  --user <name>                       Give group ownership to user
  --debug                             Show debug status informations
  version                             Show version information
  help                                Show this help message


Examples:
  # Create a root CA with encrypted private key
  $0 ssl create-ca --name "My Root CA" --password mypassword

  # Create a server certificate CSR
  $0 ssl create-csr --domains "example.com,192.168.1.100" --type server --key my.key --cn example.com

  # List all Certificate Authorities
  $0 ssl list-ca --verbose

  # Create encrypted backup
  $0 backup --compress --out /secure/dystopian-crypto-backup.tar.gz


SSL Files:
  Configuration directory: $DC_DIR/
  CA certificates:         $DC_CA/
  CA private keys:         $DC_CAKEY/
  Certificates:            $DC_CERT/
  Private keys:            $DC_KEY/
  CRL files:               $DC_CRL/


GPG Files:
  GPG Home Directory:      $DC_GNUPG/


Database:
  SSL/GnuPG database file: $DC_DB


Notes:
  • This script requires root privileges
  • SSL private keys use secp384r1 elliptic curve (384-bit)
  • SSL Certificates use SHA-384 for signatures
  • Password-protected keys use Argon2id key derivation, fallback to pbkdf2
  • All operations are logged in the JSON database for tracking
  • Use 'show-index --json' to see the complete configuration

EOF
}


preparse "$0" "$@"
set --
old_IFS=$IFS
IFS='||'
for a in $DC_POS_ARGS; do
    [ -n "$a" ] && set -- "$@" "$a"
done
IFS=$old_IFS

case "$1" in
  ssl)
    shift
    case "$1" in
      import)
        shift
        index="" import="" scan_depth=""
        copy_files="" move_files=""
        while [ $# -gt 0 ]; do
            case "$1" in
                --import*file|--import|-i) import="$2"; shift 2;;
                --import*dir) import="$2"; shift 2;;
                --scan-depth) scan_depth="$2"; shift 2;;
                --copy-files) copy_files="true"; shift;;
                --move-files) move_files="true"; shift;;
            esac
        done
        import_ssl "$index" \
            "$import" "$scan_depth" \
            "$copy_files" "$move_files"
        ;;

      kdf)
        shift
        password="" salt="" no_argon=0
        while [ $# -gt 0 ]; do
            case "$1" in
                --pass) password="$2"; shift 2;;
                --salt) salt="$2"; shift 2;;
                --pbkdf2|--no-argon) no_argon=1;;
                -h|--help|-help) shorthelp "ssl kdf"; exit 0;;
                *) echoe "Unknown command: $1"; shorthelp "ssl kdf"; exit 1;;
            esac
        done
        [ "$no_argon" -eq 0 ] && _create_argon2id_derived_key_pw "$password" "$salt"
        #[ "$no_argon" -ne 0 ] && _create_pbkdf2_derived_key_pw "$password"
        ;;

      create-ca)
        shift
        ca_name="" ca_cert_out="" ca_key_out="" ca_pass=""
        ca_salt_out="" no_argon="" ca_conf_out="" ca_csr_out=""
        keep_ca_csr="" intermediate="" root_ca_name="" root_ca_key=""
        root_ca_cert="" root_ca_pass="" root_ca_salt="" root_no_argon=""
        email="" country="" state="" locality="" organization=""
        orgunit="" days="" set_as_default="" set_as_defaultRoot=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --cert*out|--cert) ca_cert_out="$2"; shift 2 ;;
            --keyout|--key) ca_key_out="$2"; shift 2 ;;
            --ca*name|--name|-CN|--CN) ca_name="$2"; shift 2 ;;
            --intermediate) intermediate=true; shift;;
            --cfg|--config|--config*out|--cfg*out) ca_conf_out="$2"; shift 2;;
            --csr|--csr*out) ca_csr_out="$2"; shift 2;;
            --keep*csr|--keep) keep_ca_csr=false; shift;;
            --set*as*default|--set*default|--set*defaultCA) set_as_default=true; shift;;
            --set*as*default*Root|--set*default*Root|--set*defaultRootCA) set_as_defaultRoot=true; shift;;
            --root*ca|--rn|-rn) root_ca_name="$2"; shift 2;;
            --root*ca*key|--rk|-rk) root_ca_key="$2"; shift 2;;
            --root*ca*cert|--rc|-rc) root_ca_cert="$2"; shift 2;;
            --root*ca*pass|--root*ca*pass*word|--root*ca*pass*file|--rp|-rp|--rpf|-rpf) root_ca_pass="$2"; shift 2;;
            --root*ca*salt|--rs|-rs) root_ca_salt="$2"; shift 2;;
            --password|--pass|--pass*file) ca_pass="$2"; shift 2;;
            --salt*out|--salt) ca_salt_out="$2"; shift 2;;
            --no*argon|--pbkdf2) no_argon="true"; shift;;
            --email|-E) email="$2"; shift 2;;
            --country|-C) country="$2"; shift 2;;
            --state|-ST|--ST) state="$2"; shift 2;;
            --locality|-L) locality="$2"; shift 2;;
            --org|-O) organization="$2"; shift 2;;
            --orgunit|-OU) orgunit="$2"; shift 2;;
            --days) days="$2"; shift 2;;
            -h|--help|-help) shorthelp "ssl create-ca"; exit 0;;
            *) echoe "Unknown command: $1"; shorthelp "ssl create-ca"; exit 1;;
          esac
        done
        create_certificate_authority \
          "$ca_name" "$ca_key_out" "$ca_cert_out" \
          "$ca_pass" "$ca_salt_out" "$no_argon" \
          "$ca_conf_out" "$ca_csr_out" "$keep_ca_csr" \
          "$intermediate" "$email" "$country" "$state" \
          "$locality" "$organization" "$orgunit" "$days" \
          "$root_ca_name" "$root_ca_key" "$root_ca_cert" \
          "$root_ca_pass" "$root_ca_salt" "$root_no_argon" \
          "$set_as_default" "$set_as_defaultRoot"
        ;;

      create-key)
        shift
        key_name="" key_out="" password=""
        salt_out="" no_argon=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --name|--key*name) key_name="$2"; shift 2;;
            --out|--key|--key*out) key_out="$2"; shift 2;;
            --password|--pass) password="$2"; shift 2;;
            --salt|--salt*out) salt_out="$2"; shift 2;;
            --noargon|--no*argon|--pbkdf2) no_argon=true; shift;;
            -h|--help|-help) shorthelp "ssl create-key"; exit 0;;
            *) echoe "Unknown command: $1" && shorthelp "ssl create-key"; exit 1;;
          esac
        done
        create_private_key \
            "$key_name" "$key_out" \
            "$password" "$salt_out" \
            "$no_argon"
        ;;

      create-csr)
        shift
        key_name="" key_file="" csr_out="" cfg_out="" domains=""
        ips="" common_name="" client="true" server="false" password="" salt=""
        email="" crldist="" country="" state="" locality="" organization="" orgunit=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --key*name|--name) key_name="$2"; shift 2;;
            --key|-k|-pk|--privatekey) key_file="$2"; shift 2;;
            --out|-o|--csr*out) csr_out="$2"; shift 2;;
            --cfg*out|--cfg|--config|-c) cfg_out="$2"; shift 2;;
            --domains|--domain|-d) domains="$2"; shift 2;;
            --ips|-i|--ip) ips="$2"; shift 2;;
            --cn|-cn|--CN|-CN|--common*name) common_name="$2"; shift 2;;
            --client) client="true" server="false"; shift;;
            --server) server="true" client="false"; shift;;
            --pass|-p|--pw*file|--pfile) password="$2"; shift 2;;
            --salt|-s|--salt*file) salt="$2"; shift 2;;
            --mail|-m|-E|-e) email="$2"; shift 2;;
            --crldist|--crl) crldist="$2"; shift 2;;
            --country|-C) country="$2"; shift 2;;
            --state|-S) state="$2"; shift 2;;
            --locality|-L) locality="$2"; shift 2;;
            --org|-O) organization="$2"; shift 2;;
            --orgunit|-OU|--OU) orgunit="$2"; shift 2;;
            -h|--help|-help) shorthelp "ssl create-csr"; exit 0;;
            *) echoe "Unknown command: $1"; shorthelp "ssl create-csr"; exit 1;;
          esac
        done
        create_certificate_signing_request \
          "$key_name" "$key_file" "$password" "$salt" \
          "$csr_out" "$cfg_out" "$domains" "$ips" \
          "$client" "$server" "$email" "$country" \
          "$state" "$locality" "$organization" "$orgunit" \
          "$common_name" "$crldist"
        ;;

      sign-csr|create-cert)
        shift
        csr_name="" csr_file="" cert_out="" ca_index=""
        ca_cert_file="" ca_key_file="" ca_pass="" ca_salt=""
        validity_days="" keep_csr="" keep_cfg="" config_file=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --key*name|--name) csr_name="$2"; shift 2;;
            --csr) csr_file="$2"; shift 2;;
            --caname|--caindex|--ca|--ci|-ca|-ci) ca_index="$2"; shift 2;;
            --cacert) ca_cert_file="$2"; shift 2;;
            --cakey) ca_key_file="$2"; shift 2;;
            --out|--cert|--cert*out) cert_out="$2"; shift 2;;
            --capass|--pass) ca_pass="$2"; shift 2;;
            --cfgfile|--config|--configfile|--cfg) config_file="$2"; shift 2;;
            --casalt|--salt) ca_salt="$2"; shift 2;;
            --days) validity_days="$2"; shift 2;;
            --keep) keep_csr="true"; keep_cfg="true"; shift;;
            --keepcsr) keep_csr="true"; shift;;
            --keepcfg) keep_cfg="true"; shift;;
            -h|--help|-help) shorthelp "ssl sign-csr"; exit 0;;
            *) echoe "Unknown command: $1"; shorthelp "ssl sign-csr"; exit 1;;
          esac
        done
        sign_certificate_request \
            "$csr_name" "$csr_file" "$cert_out" \
            "$ca_index" "$ca_cert_file" "$ca_key_file" \
            "$ca_pass" "$ca_salt" "$validity_days" \
            "$keep_csr" "$keep_cfg" "$config_file"
        ;;

      set-as-default-CA|set-as-default)
        shift
        index=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --index|-i|-idx|--idx) index="$2"; shift 2;;
          esac
        done
        set_as_default_CA "$index"
        ;;

      verify-cert)
        shift
        cert_file="" ca_cert=""
        cert_chain="" check_expiry="true"
        while [ $# -gt 0 ]; do
          case "$1" in
            --cert) cert_file="$2"; shift 2;;
            --ca) ca_cert="$2"; shift 2;;
            --chain) cert_chain="$2"; shift 2;;
            --no-check-expiry) check_expiry="false"; shift;;
            -h|--help|-help) shorthelp "ssl verify-cert"; exit 0;;
            *) echoe "Unknown command: $1"; shorthelp "ssl verify-cert"; exit 1;;
          esac
        done
        verify_certificate \
          "$cert_file" "$ca_cert" \
          "$cert_chain" "$check_expiry"
        ;;

      list-ca)
        shift
        ca_list_type=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --type) ca_list_type="$2"; shift 2;;
            -h|--help|-help) shorthelp "ssl list-ca"; exit 0;;
            *) echoe "Unknown option for list-ca: $1"; exit 1;;
          esac
        done
        list_certificate_authorities "$ca_list_type"
        ;;

      show-ca)
        shift
        ca_show_index=""
        ca_show_type=""
        show_cert_details=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --index) ca_show_index="$2"; shift 2;;
            --type) ca_show_type="$2"; shift 2;;
            --cert) show_cert_details="true"; shift;;
            -h|--help|-help) shorthelp "ssl show-ca"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "ssl show-ca"; exit 1;;
          esac
        done
        show_certificate_authority "$ca_show_index" "$ca_show_type" "$show_cert_details"
        ;;

      encrypt)
        shift
        cert_file="" input="" output=""
        password="" asymmetric=""
        while [ $# -gt 0 ]; do
          case "$1" in
          --cert) cert_file="$2"; shift 2;;
          --in) input="$2"; shift 2;;
          --out) output="$2"; shift 2;;
          --pass) password="$2"; shift 2;;
          --asymmetric) asymmetric="true"; shift;;
          -h|--help|-help) shorthelp "ssl encrypt"; exit 0;;
          *) echoe "Unknown option for encrypt: $1";  shorthelp "ssl encrypt"; exit 1;;
          esac
        done
        ssl_encrypt "$cert_file" "$input" "$output" "$password" "$asymmetric"
        ;;

      decrypt)
        shift
        key_file="" input="" output="stdout"
        password="" asymmetric="false"
        while [ $# -gt 0 ]; do
          case "$1" in
          --key) key_file="$2"; shift 2 ;;
          --in) input="$2"; shift 2 ;;
          --out) output="$2"; shift 2 ;;
          --pass) password="$2"; shift 2 ;;
          --symmetric) asymmetric="true"; shift;;
          -h|--help|-help) shorthelp "ssl decrypt"; exit 0;;
          *) echoe "Unknown option for decrypt: $1"; shorthelp "ssl decrypt"; exit 1;;
          esac
        done
        ssl_decrypt "$key_file" "$input" "$output" "$password" "$asymmetric"
        ;;

      create-crl)
        shift
        ca_name="" ca_key_file="" ca_cert_file=""
        ca_pass="" ca_salt="" crl_outfile=""
        crl_days=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --ca-name) ca_name="$2"; shift 2;;
            --ca-key) ca_key_file="$2"; shift 2;;
            --ca-cert) ca_cert_file="$2"; shift 2;;
            --out) crl_outfile="$2"; shift 2;;
            --ca-pass|--pass) ca_pass="$2"; shift 2;;
            --days) crl_days="$2"; shift 2;;
            -h|--help|-help) shorthelp "ssl create-crl"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "ssl create-crl"; exit 1;;
          esac
        done
        create_certificate_revocation_list \
          "$ca_key_file" "$ca_cert_file" \
          "$crl_outfile" "$ca_pass" "$crl_days"
        ;;

      revoke-cert)
        shift
        cert_file="" ca_name="" ca_key_file=""
        ca_cert_file="" ca_pass="" reason=""
        while [ $# -gt 0 ]; do
          case "$1" in
          --cert) cert_file="$2"; shift 2;;
          --ca-name) ca_name="$2"; shift 2;;
          --ca-key) ca_key_file="$2"; shift 2;;
          --ca-cert) ca_cert_file="$2"; shift 2;;
          --ca-pass|--pass) ca_pass="$2"; shift 2;;
          --reason) reason="$2"; shift 2;;
          -h|--help|-help) shorthelp "ssl revoke-cert"; exit 0;;
          *) echo "Unknown option: $1"; shorthelp "ssl revoke-cert"; exit 1;;
          esac
        done
        revoke_certificate \
          "$cert_file" "$ca_key_file" \
          "$ca_cert_file" "$ca_pass" "$reason"
        ;;

      create-config)
        shift
        type="" domains="" ips="" email=""
        country="" state="" locality="" org=""
        orgunit="" common_name="" crldist=""
        cfg_out=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --out|--cfg*out|--cfg) cfg_out="$2"; shift 2;;
            --type|-t) type="$2"; shift 2;;
            --domains|-d|--domain) domains="$2"; shift 2;;
            --ips|-i|--ip) ips="$2"; shift 2;;
            --email|-E) email="$2"; shift 2;;
            --country|-C) country="$2"; shift 2;;
            --state|--ST|-ST) state="$2"; shift 2;;
            --locality|-L) locality="$2"; shift 2;;
            --organization|-O) org="$2"; shift 2;;
            --orgaunit|-OU|--OU) orgunit="$2"; shift 2;;
            --common-name|-CN|--CN) common_name="$2"; shift 2;;
            --crldistributionpoint|--crldist) crldist="$2"; shift 2;;
            -help|--help|-h) shorthelp "ssl create-config"; exit 0;;
            *) echo "Unknown option: $1"; shorthelp "ssl create-config"; exit 1;;
          esac
        done
        create_sslconfig \
          "$type" "$domains,$ips" "$email" \
          "$country" "$state" "$locality" \
          "$org" "$orgunit" "$common_name" \
          "$crldist" "$cfg_out"
        ;;

      set-default-ca|--set-default-ca)
        shift
        default_ca_index=""
        default_ca_type=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --index) default_ca_index="$2"; shift 2;;
            --type) default_ca_type="$2"; shift 2;;
            -help|--help|-h) shorthelp "ssl set-default-ca"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "ssl set-default-ca"; exit 1;;
          esac
        done
        set_default_ca "$default_ca_index" "$default_ca_type"
        ;;

      install)
        shift
        client=""
        server=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --docker-client-cert) client=true; shift;;
            --docker-server-cert) server=true; shift;;
            -help|--help|-h) shorthelp "ssl install"; exit 0;;
            *) echo "Unknown option: $1"; shorthelp "ssl install"; exit 1;;
          esac
        done
        install_docker_cert "$client" "$server"
        ;;
      -h|--help|-help|help) sslhelp; exit 0;;
      *) echoe "Unknown SSL command: $1"; help; exit 1;;
    esac
    ;;

  gpg)
    shift
    case "$1" in
      import)
        shift
        import_path="" index="" scan_depth=""
        passphrase="" remove_keys="" homedir=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --file|--dir|-d|-f) import_path="$2"; shift 2;;
            --index|-i) index="$2"; shift 2;;
            --pass*file|--pass|-p|-pf|--pf) passphrase="$2"; shift 2;;
            --scan*depth|-sd|--sd) scan_depth="$2"; shift 2;;
            --homedir|--home) homedir="$2"; shift 2;;
            --delete|--del|-del) remove_keys="true"; shift;;
            -h|--help|-help) shorthelp "gpg import"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "gpg import"; exit 1;;
          esac
        done
        gpg_import_keys \
          "$import_path" "$passphrase" \
          "$scan_depth" "$index" \
          "$remove_keys" "$homedir"
        ;;

      export)
        shift
        fingerprint="" name_real="" key_id=""
        public_key_out="" private_key_out="" index=""
        output_dir="" no_armor="" with_subkeys=""
        homedir="" passphrase="" openssl_encrypt=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --fingerprint|--fp|-fp) fingerprint="$2"; shift 2;;
            --with-subkeys|--subs|--subkeys|--allsubs|--all-subkeys) with_subkeys="true"; shift;;
            --name|-n) name_real="$2"; shift 2;;
            --key-id|-k|--kid|-kid) key_id="$2"; shift 2;;
            --index|-i) index="$2"; shift 2;;
            --passphrase|--pass|--pass*file|--pf|-pf) passphrase="$2"; shift 2;;
            --public|--pub|-p) public_key_out="$2"; shift 2;;
            --homedir|-h|-hd|--hd) homedir="$2"; shift 2;;
            --no-openssl-encrypt|--no-ssl-encrypt|--no-encrypt|-ne|--ne|--noenc) openssl_encrypt="false"; shift;;
            --private|--priv|--secret|--sec|-s) private_key_out="$2"; shift 2;;
            --out|--dir|--outdir|--od|-od|-o) output_dir="$2"; shift 2;;
            --no-armor|--na|-na|--binary|--bin|-b) no_armor="true"; shift;;
            --help|-help) shorthelp "gpg export"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "gpg export"; exit 1;;
          esac
        done
        gpg_export_keypair \
          "$fingerprint" "$name_real" \
          "$key_id" "$index" "$no_armor" \
          "$homedir" "$output_dir" \
          "$public_key_out" "$private_key_out" \
          "$with_subkeys" "$passphrase" \
          "$openssl_encrypt"
        ;;

      genpair)
        shift
        private_key_out="" public_key_out=""
        name_real="" name_email="" name_comment=""
        expiry_date="" homedir="" sign="" no_subs=""
        passphrase="" auth="" encrypt="" index=""
        sname_real="" sname_email="" sname_comment=""
        spassphrase="" sexpiry_date=""
        ename_real="" ename_email="" ename_comment=""
        epassphrase="" eexpiry_date=""
        aname_real="" aname_email="" aname_comment=""
        apassphrase="" aexpiry_date=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --home|--homedir) homedir="$2"; shift 2;;
            --name|-n) name_real="$2"; shift 2;;
            --email|-e|--mail) name_email="$2"; shift 2;;
            --comment|-c) name_comment="$2"; shift 2;;
            --ename|-en|--en) ename_real="$2"; shift 2;;
            --eemail|-ee|--ee) ename_email="$2"; shift 2;;
            --ecomment|-ec|--ec) ename_comment="$2"; shift 2;;
            --aname|-an|--an) aname_real="$2"; shift 2;;
            --aemail|-ae|--ae|--amail) aname_email="$2"; shift 2;;
            --acomment|-ac|--ac) aname_comment="$2"; shift 2;;
            --sname|-sn|--sn) sname_real="$2"; shift 2;;
            --semail|-se|--se|--smail) sname_email="$2"; shift 2;;
            --scomment|-sc|--sc) sname_comment="$2"; shift 2;;
            --passphrase|--pass|--pass*file|-p|--pf|-pf) passphrase="$2"; shift 2;;
            --spassphrase|--spass|--spass*file|-sp|--spf|-spf) spassphrase="$2"; shift 2;;
            --epassphrase|--epass|--epass*file|-ep|--epf|-epf) epassphrase="$2"; shift 2;;
            --apassphrase|--apass|--apass*file|-ap|--apf|-apf) apassphrase="$2"; shift 2;;
            --encrypt|--enc) encrypt="true"; shift;;
            --sign) sign="true"; shift;;
            --auth) auth="true"; shift;;
            --expire) expiry_date="$2"; shift 2;;
            --no-subs) no_subs="true"; shift;;
            --index|-i) index="$2"; shift 2;;
            -h|--help|-help) echoe "gpg genpair" && shorthelp "gpg genpair"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "gpg genpair"; exit 1;;
          esac
        done
        gpg_create_keypair \
          "$name_real" "$passphrase" "$name_email" \
          "$name_comment" "$expiry_date" "$homedir" \
          "$sign" "$auth" "$encrypt" \
          "$index" "$no_subs" "$sname_real" "$sname_email" \
          "$sname_comment" "$sexpiry_date" "$spassphrase" \
          "$ename_real" "$ename_email" "$ename_comment" \
          "$eexpiry_date" "$epassphrase" "$aname_real" \
          "$aname_email" "$aname_comment" "$aexpiry_date" \
          "$apassphrase"
        ;;
      add-key|addkey|add-sub|addsub|addsubkey)
        shift
        homedir="" name_real="" name_email=""
        name_comment="" uid="" fingerprint="" key_id=""
        passphrase="" encrypt="false" sign="false" auth="false"
        expires="" sub_passphrase=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --index|-i|--idx|-idx) index="$2"; shift 2;;
            --home|--homedir) homedir="$2"; shift 2;;
            --name|-n) name_real="$2"; shift 2;;
            --email|-e|--mail) name_email="$2"; shift 2;;
            --comment|-c) name_comment="$2"; shift 2;;
            --uid) uid="$2"; shift 2;;
            --fingerprint|--fp|-fp) fingerprint="$2"; shift 2;;
            --key-id|--keyid|--kid|-kid) key_id="$2"; shift 2;;
            --passphrase|--pass|--pass*file|-p|--pf|-pf) passphrase="$2"; shift 2;;
            --subpassphrase|--subpass|--subpass*file|-sp|--spf|-spf) sub_passphrase="$2"; shift 2;;
            --encrypt|--enc) encrypt="true"; shift;;
            --sign) sign="true"; shift;;
            --auth) auth="true"; shift;;
            --expires) expires="$2"; shift 2;;
            -h|--help|-help) shorthelp "gpg addkey"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "gpg addkey"; exit 1;;
          esac
        done
        gpg_create_subkey \
          "$homedir" "$name_real" \
          "$name_email" "$name_comment" \
          "$uid" "$fingerprint" \
          "$key_id" "$passphrase" \
          "$encrypt" "$sign" \
          "$auth" "$index" \
          "$expires" "$sub_passphrase"
        ;;

      sign-pkgbuild)
        shift
        path_to_file=""
        while [ $# -gt 0 ]; do
          case "$1" in
            --file|-f) path_to_file="$2"; shift 2;;
            -h|--help|-help) shorthelp "gpg sign-pkgbuild"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "gpg sign-pkgbuild"; exit 1;;
          esac
        done

        ;;
      -h|--help|-help|help) gpghelp; exit 0;;
      *) echoe "Unknown GPG command: $1"; help; exit 1;;
    esac
    ;;

  # Maintenance and utility commands
  --cleanup|cleanup)
    shift
    cleanup_index="" cleanup_non_ca_keys="false"
    cleanup_orphaned="false" cleanup_backups="false"
    cleanup_dry_run="false" cleanup_keep_backups="false"
    while [ $# -gt 0 ]; do
        case "$1" in
            --index) cleanup_index="$2"; shift 2;;
            --nonca) cleanup_non_ca_keys="true"; shift;;
            --orphaned) cleanup_orphaned="true"; shift;;
            --backups) cleanup_backups="true"; shift;;
            --dry*run) cleanup_dry_run="true"; shift;;
            --keep*bkps) cleanup_keep_backups="true"; shift;;
            -h|--help|-help) shorthelp "cleanup"; exit 0;;
            *) echoe "Unknown option: $1"; shorthelp "cleanup"; exit 1;;
        esac
    done
    cleanup_dcrypto_files "$cleanup_index" "$cleanup_orphaned" \
      "$cleanup_backups" "$cleanup_non_ca_keys" \
      "$cleanup_dry_run" "$cleanup_keep_backups"
    ;;
  --show-index|show-index)
    shift
    show_keys="false"
    show_ca="false"
    json_output="false"
    while [ $# -gt 0 ]; do
      case "$1" in
        --keys) show_keys="true"; shift;;
        --ca) show_ca="true"; shift;;
        --json) json_output="true"; shift;;
        -help|--help|-h) shorthelp "show-index"; exit 0;;
        *) echo "Unknown option: $1"; shorthelp "ssl $0"; exit 1;;
      esac
    done
    show_index "$show_keys" "$show_ca" "$json_output"
    ;;

  --backup|backup)
    shift
    backup_output=""
    backup_compress="false"
    backup_exclude_keys="false"
    while [ $# -gt 0 ]; do
      case "$1" in
        --out) backup_output="$2"; shift 2;;
        --compress|-z) backup_compress="true"; shift;;
        --exclude-keys) backup_exclude_keys="true"; shift;;
        -help|--help|-h) shorthelp "backup"; exit 0;;
        *) echoe "Unknown option: $1"; shorthelp "backup"; exit 1;;
      esac
    done
    backup_dcrypto "$backup_output" "$backup_compress" "$backup_exclude_keys"
    ;;

  --restore|restore)
    shift
    restore_from=""
    restore_force="false"
    while [ $# -gt 0 ]; do
      case "$1" in
        --from) restore_from="$2"; shift 2;;
        --force) restore_force="true"; shift;;
        -help|--help|-h) shorthelp "restore"; exit 0;;
        *) echoe "Unknown option: $1"; shorthelp "restore"; exit 1;;
      esac
    done
    restore_dcrypto "$restore_from" "$restore_force"
    ;;

  --reset|--reset-crypto|reset-crypto|reset)
    shift
    reset_ssl="false"
    reset_gpg="false"
    while [ $# -gt 0 ]; do
      case "$1" in
        --all|-a) reset_ssl="true"; reset_gpg="true"; shift;;
        --ssl|-s) reset_ssl="true"; shift;;
        --gpg|-g) reset_gpg="true"; shift;;
        -help|--help|-h) shorthelp "reset-dcrypto"; exit 0;;
        *) echoe "Unknown option: $1"; shorthelp "reset-dcrypto"; exit 1;;
      esac
    done
    reset_dcrypto "$reset_ssl" "$reset_gpg"
    exit 0
    ;;

  --version|version|-V)
    echos "dystopian-crypto v$VERSION"
    echos "A POSIX shell script for managing SSL certificates and GPG keys"
    ;;

  -h|--help|-help) help; exit 0;;
  *) echoe "Unknown command: $1"; help; exit 1;;
esac